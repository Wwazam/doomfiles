:PROPERTIES:
:header-args: :results none
:END:
#+TITLE: Litterate Configuration

* Intro
#+begin_src elisp
(setq byte-compile-warnings '(cl-functions))
#+END_SRC
** random keybindings
#+begin_src elisp
(map!
 (:map override :i "C-k" #'evil-insert-digraph))
#+end_src
* Graphic
** Theme
#+BEGIN_SRC elisp
(setq theme-list '(
                   ;; doom-1337
                   ;; doom-zenburn
                   ;; darktooth
                   ;; doom-material
                   ;; doom-nord
                   ;; doom-spacegrey
                   ;; doom-tomorrow-night
                   ;; badwolf
                   ;; doom-ayu-mirage
                   doom-opera
                   ))


(defun random-theme ()
  (interactive)
  (random t)  ; randomazing
  (load-theme (nth (random (length theme-list)) theme-list) t))

(random-theme)
;;
#+END_SRC
** Font
#+begin_src elisp
(setq doom-font (font-spec :family "hack" :size 16))
#+end_src
* Evil
#+BEGIN_SRC elisp
;; ;; jk to Normal Mode
(setq-default evil-escape-unordered-key-sequence "jk")
(setq-default evil-escape-delay 0.5)
;;
#+END_SRC
* Languages
** Common Lisp
*** Change completion type
Sly simple completion seems to be broken beyond repair, let's use fuzzy search!

#+begin_src elisp
(after! sly
  (setq sly-complete-symbol-function 'sly-flex-completions))
#+end_src

** Elm
*** format on save
#+begin_src elisp
(add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src
*** Compile buffer rule
#+begin_src elisp
(set-popup-rule! "^\\*elm-make*" :side 'right :width 82)
#+end_src
*** better tab
#+begin_src elisp
(map! :mode 'elm-mode
      :i "TAB" #'elm-indent-cycle)
#+end_src
** js
#+BEGIN_SRC elisp

(setq-hook! 'js-mode-hook +format-with-lsp nil)

(setq-hook! 'web-mode-hook rainbow-mode nil)

;;
#+END_SRC
** Clojure
*** lispy
Add dependencies to be able to execute code with =e= with lispy
#+begin_src elisp
(setq cider-jack-in-dependencies
                           (delete-dups
                            (append
                             cider-jack-in-dependencies
                             lispy-cider-jack-in-dependencies)))
#+end_src

** Org
*** Variables
**** Todo keywords
#+begin_src elisp
(setq org-todo-keywords
      '((sequence "STRT(s)" "TODO(t)" "IDEA(i)" "PROJ(p)" "WAIT(w@/!)" "HOLD(h@/!)" "|" "DONE(d!)" "KILL(k@)")
        (sequence "HABIT(H)" "READ(R)")
        (sequence "[!](T)" "[?](Q)" "|" "[X](D)")
        (sequence "ALLISON(a)" "|")))
#+end_src

***** log into drawer
#+begin_src elisp
(setq org-log-into-drawer 't)
#+end_src
***** todo faces
[[file:~/.emacs.d/modules/lang/org/config.el::;; HACK Face specs fed directly to `org-todo-keyword-faces' don't respect][In doom/org/config]]

#+begin_src elisp
;; declare new face
(with-no-warnings
  (custom-declare-face '+org-todo-list '((t (:inherit (bold font-lock-builtin-face org-todo)))) ""))

(setq
 org-todo-keyword-faces
 '(("STRT" . +org-todo-active)
   ("[?]"  . +org-todo-onhold)
   ("WAIT" . +org-todo-onhold)
   ("HOLD" . +org-todo-onhold)
   ("IDEA" . +org-todo-project)
   ("PROJ" . +org-todo-project)
   ("ALLISON" . +org-todo-project)
   ("HABIT" . +org-todo-list)
   ("READ" . +org-todo-list)
   ("KILL" . +org-todo-cancel)))
#+end_src
**** Org directory
#+begin_src elisp
(setq org-directory "~/documents/notes/roam")
#+end_src
**** Org-id
#+begin_src elisp
(setq org-id-locations-file "~/documents/notes/roam/.orgids")
#+end_src
*** Org agenda
**** Files
#+begin_src elisp
(setq org-agenda-files '("~/documents/notes/roam/daily"))
#+end_src
**** Habits
#+begin_src elisp
(defun my/org-agenda-habits ())

(defun my/org-agenda-projects ()
  (org--todo ))
#+end_src
**** Agenda Views
*** Citations
**** Citar
#+begin_src elisp
(after! org
  (setq! citar-bibliography (list (concat org-directory "/references.bib"))))
#+end_src
**** Citation
#+begin_src elisp
;; (setq org-capture-templates
;;       '(("d" "default" plain "%?"
;;          :if-new (file+head "${slug}.org"
;;                             "#+title: ${title}\n#+SETUPFILE: ~/bib-lib/setup_file.org\n* References :ignore:\n#+print_bibliography:")
;;          :unnarrowed t)
;;         ;; capture to inbox
;;         ("i" "inbox" entry "* TODO %?\n"
;;          :target (node "45acaadd-02fb-4b93-a741-45d37ff9fd5e")
;;          :unnarrowed t
;;          :empty-lines-before 1
;;          :empty-lines-after 1
;;          :prepend t)
;;         ;; bibliography note template
;;         ("r" "bibliography reference" plain "%?"
;;          :if-new (file+head "references/notes_${citekey}.org"
;;                             "#+title: Notes on ${title}\n#+SETUPFILE: ~/bib-lib/ref_setup_file.org\n* References :ignore:\n#+print_bibliography:")
;;          :unnarrowed t)
;;         ;; for my annotated bibliography needs
;;         ("s" "short bibliography reference (no id)" entry "* ${title} [cite:@%^{citekey}]\n%?"
;;          :target (node "01af7246-1b2e-42a5-b8e7-68be9157241d")
;;          :unnarrowed t
;;          :empty-lines-before 1
;;          :prepend t)))
#+end_src

*** Blocks
**** Today Schedule
#+begin_src elisp
(setq bpa-org-agenda-block--today-schedule
      '(agenda ""
               ((org-agenda-overriding-header "Today's Schedule:")
                (org-agenda-span 1)
                (org-agenda-start-on-weekday nil)
                (org-agenda-start-day "+0d")
                (org-agenda-show-log 't)
                (org-agenda-prefix-format '((agenda . "  %? i%?-12t% s")))
                (org-agenda-scheduled-leaders '("> " ">> ")))))
#+end_src

***** define
#+begin_src elisp :noweb t
(defvar bpa-org-agenda-block--today-schedule
  ''(agenda ""
         ((org-agenda-overriding-header "Today's Schedule:")
          (org-agenda-span 1)
          (org-agenda-start-on-weekday nil)
          (org-agenda-start-day "+0d")
          (org-agenda-show-log 't)))
  "A block showing a 1 day schedule.")
#+end_src
**** Habits
#+begin_src elisp
(setq bpa-org-agenda-block--habits
  '(tags-todo "TODO=\"HABIT\"+SCHEDULED<\"<+1d>\""
         ((org-agenda-overriding-header "Habits")
          (org-agenda-files '("~/documents/notes/roam/20220114125434-habit.org"))
          (org-agenda-prefix-format '((tags . " ")))
          (org-agenda-todo-keyword-format ""))))
#+end_src

**** Past logs
#+begin_src elisp :results drawer replace
(defvar bpa-org-agenda-block--past-4-days
  '(agenda ""
           ((org-agenda-overriding-header "Past few days")
            (org-agenda-span 4)
            (org-agenda-start-on-weekday nil)
            (org-agenda-start-day "-4d")
            (org-agenda-skip-scheduled-if-done 't)
            (org-agenda-show-log 't)
            (org-agenda-log-mode-items '(clock done state))))
  "A block showing what I did in the last 4 days.")
#+end_src

#+RESULTS:
:results:
bpa-org-agenda-block--past-4-days
:end:

***** Updating
*** Views
#+name: update-org-agenda-custom-commands
#+begin_src elisp
(setq org-agenda-custom-commands
      `(("n" "Agenda and all TODOs"
         ((agenda "")
          (todo "STRT")
          (todo "TODO")
          (todo "WAIT|HOLD")
          (todo "PROJ")
          (todo "IDEA")))
        ("d" "Daily"
         (,bpa-org-agenda-block--today-schedule
          ,bpa-org-agenda-block--habits))
        ("h" "Habit"
         ((todo "HABIT"
                ((org-agenda-files '("~/documents/notes/roam/20220114125434-habit.org"))))))))
#+end_src

*** Roam
**** TODO Stuff
#+begin_src elisp
(setq org-roam-directory "~/documents/notes/roam/")

(defadvice! doom-modeline--reformat-roam (orig-fun)
  :around #'doom-modeline-buffer-file-name
  (message "Reformat?")
  (message (buffer-file-name))
  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "(\\1-\\2-\\3) "
       (funcall orig-fun))
    (funcall orig-fun)))

(defun +org-entry-category ()
  "Get category of item at point.

Supports `org-roam' filenames by chopping prefix cookie."
  (+string-chop-prefix-regexp
   "^[0-9]+\\-"
   (or (org-entry-get nil "CATEGORY")
       (if buffer-file-name
           (file-name-sans-extension
            (file-name-nondirectory buffer-file-name))
         ""))))

;; requires s.el
(defun +string-chop-prefix-regexp (prefix s)
  "Remove PREFIX regexp if it is at the start of S."
  (s-chop-prefix (car (s-match prefix s)) s))

#+end_src

**** TODO Capture templates
The map is wrong
#+begin_src elisp
(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

(map! :map 'doom-leader-notes-map "i" #'my/org-roam-capture-inbox )
#+end_src

***** HOLD old Capture try
#+begin_src elisp
;; (setq org-roam-capture-templates
;;       '(("d"
;;          "default"
;;          plain
;;          "%?"
;;          :if-new (file+head
;;                   "%<%Y%m%d%H%M%S>-${slug}.org"
;;                   "#+title: ${title}\n\n- tags ::\n\n* Content")
;;          :unnarrowed t)))
#+end_src
**** No autocompletion all the time
I always insert a link at the end of a heading, it's annoying
#+begin_src elisp
(setq org-roam-completion-everywhere nil)
#+end_src
***** HOLD Try to trigger org-roam-node-insert with `[[`
#+begin_src elisp
;(map! :i "[[" #'org-roam-node-insert)
#+end_src

**** Org-roam server
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
**** Org-roam-agenda
***** Add hook when changing todo state
#+begin_src elisp
(defun my/org-project-find-id ()
  (when (equal org-state "PROJ")
    (org-id-get-create)))

(add-hook! 'org-after-todo-state-change-hook #'my/org-project-find-id)

#+end_src
***** List of files with todo keywords
#+begin_src elisp
(defun my/org-roam-agenda-files ()
  (mapcar #'org-roam-node-file
          (seq-filter #'org-roam-node-todo (org-roam-node-list))))
#+end_src

***** Map to roam agenda view
#+begin_src elisp
(defun my/org-roam-agenda ()
  (interactive)
  (let ((org-agenda-files (mapcar #'org-roam-node-file
                                (seq-filter #'org-roam-node-todo (org-roam-node-list)))))
    (org-todo-list 2)))

(map! :map 'doom-leader-notes-map
      (:prefix ("p" . "project")
       "t" #'my/org-roam-agenda))
#+end_src

*** Babel
**** Elm
#+begin_src elisp
(org-babel-do-load-languages
   'org-babel-load-languages
   '((elm . t)))
#+end_src
**** Tangle on save
#+begin_src elisp
;; (add-hook! 'org-mode-hook
;;   (add-hook! 'after-save-hook (org-babel-tangle))
;;   )
#+end_src
**** Don't ask to execute code blocks
#+BEGIN_SRC elisp

(setq org-confirm-babel-evaluate nil)
;;
#+END_SRC
*** Other
#+BEGIN_SRC elisp
;; ;; Directory

(set-display-table-slot standard-display-table
                        'selective-display (string-to-vector " …")) ; or whatever you like
(after! org
  (setq org-log-into-drawer t))

(setq org-agenda-prefix-format
      '((agenda . " %i %-35:(+org-entry-category)%?-12t% s")
        (todo . " %i %-35:(+org-entry-category)")
        (tags . " %i %-12:(+org-entry-category)")
        (search . " %i %-12:(+org-entry-category)")))

#+END_SRC
** php
#+BEGIN_SRC elisp
(setq! lsp-clients-php-server-command
       (expand-file-name "~/.config/composer/vendor/felixfbecker/language-server/bin/php-language-server.php"))

       #+END_SRC
** python
#+BEGIN_SRC elisp
(setq-hook! 'python-mode-hook +format-with-lsp t)
#+END_SRC

* SSH Agent
#+BEGIN_SRC elisp
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+END_SRC
* yas
#+BEGIN_SRC elisp
(defun +yas/org-src-header-p ()
  "Return non-nil if point is on a org src header, nil otherwise."
  (car
   (member
    (downcase
     (save-excursion
       (goto-char (line-beginning-position))
       (buffer-substring-no-properties
        (point)
        (or (ignore-errors
              (search-forward " " (line-end-position)))
            (1+ (point))))))
    '("#+property:" "#+begin_src" "#+header:"))))
#+END_SRC
* ripgrep
#+BEGIN_SRC elisp
(after! counsel
  (setq counsel-rg-base-command "rg -M 240 --with-filename --no-heading --line-number --color never %s || true"))
#+END_SRC
* Applications
** mu4e
#+BEGIN_SRC elisp
(setq +mu4e-mu4e-mail-path '~/documents/mail)
(set-email-account! "basile.pracca@gmail.com"
                    '((mu4e-sent-folder       . "/Sent")
                      (mu4e-drafts-folder     . "/Draft")
                      (mu4e-trash-folder      . "/Trash")
                      ;; (mu4e-refile-folder     . "/All")
                      (smtpmail-smtp-user     . "basile.pracca@gmail.com")
                      (mu4e-compose-signature . "---\nBasile PRACCA"))
                    t)
(setq user-mail-address "basile.pracca@gmail.com")

(setq mu4e-bookmarks
      '(( :name  "Unread messages"
          :query "flag:unread AND NOT flag:trashed AND maildir:/INBOX"
          :key ?u)
        ( :name "Today's messages"
          :query "date:today..now and maildir:/INBOX"
          :key ?t)
        ( :name "Last 7 days"
          :query "date:7d..now AND and maildir:/INBOX"
          :hide-unread t
          :key ?w)
        ( :name "Important"
          :query "maildir:/Starred"
          :key ?i)
        ( :name "Git"
          :query "from:noreply@github.com or from:noreplay@gitlab.com"
          :key ?g)
        )
      )
#+END_SRC
** man
#+begin_src elisp
(set-popup-rule! "^\\*Man" :side 'right :width 82)
#+end_src
** elfeed
#+BEGIN_SRC elisp
(map! :map 'doom-leader-open-map "e" #'elfeed)
(map! :map 'elfeed-search-mode-map :n "r" #'elfeed-search-fetch)
(setq rmh-elfeed-org-files '("~/documents/notes/elfeed.org"))
#+END_SRC
*** elfeed dashboard
#+BEGIN_SRC elisp
(setq elfeed-dashboard-file "~/.doom.d/elfeed_dashboard.org")
#+END_SRC
* Tools
** Vertico
*** Load consult.el
#+begin_src elisp
(autoload 'consult--directory-prompt "consult")
#+end_src
** Blamer
#+begin_src elisp
(use-package blamer
  :defer 20
  :custom
  (blamer-idle-time 0.5)
  (blamer-min-offset 0)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background nil
                   :height 110
                   :italic t))))
#+end_src
* window transpose
#+BEGIN_SRC elisp
(map! :map 'evil-window-map "t" #'transpose-frame)
#+END_SRC
* avy
#+BEGIN_SRC elisp
(map! :nvei "C-." #'avy-goto-char-2)
(map! :nvei "C->" #'avy-resume)
#+end_src
